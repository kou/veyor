#!/usr/bin/env ruby

require "thor"
require "veyor"
require "multi_json"

class Yey < Thor

  include Thor::Actions
  # class_option :json, :type => :boolean, :default => false

  desc "projects", "List projects"
  long_desc <<-LONGDESC
    `veyor projects` list projects

    # List projects
    \x5$ veyor projects

    "foo"
    \x5"bar"
    \x5... (cutoff)

    # Get JSON back
    \x5$ veyor projects --json | jq .[].builds[].status

    "cancelled"
    \x5"success"
    \x5"success"
    \x5"failed"
    \x5... (cutoff)
  LONGDESC
  option :json, :type => :boolean, :default => false
  def projects
    out = Veyor.projects()

    if !options[:json]
      names = out.collect{ |x| x['name'] }.sort
      puts names
    else
      puts MultiJson.encode(out)
    end
  end

  desc "project [Name]", "List a project"
  long_desc <<-LONGDESC
    `veyor project` list a project's metadata

    # Get metadata for a project
    \x5$ veyor project cowsay

     project: cowsay
    \x5 repository: sckott/cowsay
    \x5 branch: master
    \x5 build status: cancelled
    \x5 build ID: 3906530

    # Get JSON back
    \x5$ veyor project cowsay --json | jq .build.status

    "cancelled"
  LONGDESC
  option :json, :type => :boolean, :default => false
  def project(name)
    out = Veyor.project(project: name)
    if out.keys.length == 1 and out.keys[0] == "message"
      puts "project not found"
    else
      if !options[:json]
        puts 'project: ' + out['project']['name']
        puts 'repository: ' + out['project']['repositoryName']
        puts 'branch: ' + out['project']['repositoryBranch']
        puts 'build status: ' + out['build']['status']
        puts 'build ID: ' + out['build']['buildId'].to_s
        puts
      else
        puts MultiJson.encode(out)
      end
    end
  end

end

Yey.start(ARGV)
